import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { createRequire } from 'module';
const require = createRequire(import.meta.url);

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	define: {
		'global': 'globalThis',
		'process.env.NODE_ENV': '"production"'
	},
	inject: ['./polyfills.js'],
	platform: 'browser',
	alias: {
		'process': require.resolve('process/browser.js'),
		'buffer': require.resolve('buffer'),
		'url': require.resolve('url'),
		'crypto': require.resolve('crypto-browserify'),
		'stream': require.resolve('stream-browserify'),
		'util': require.resolve('util'),
		'path': require.resolve('path-browserify'),
		'querystring': require.resolve('querystring-es3'),
	},
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}